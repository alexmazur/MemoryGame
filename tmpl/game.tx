: cascade "include/layout_game.tx"

: override content -> {
<section>

	<div id="content-box1">Player <h3><: $name1 :></h3>: <span id=cp1>0</span> turns<p>&starf;</p>timer: <span id=p0 class=turn>0</span></div>
	<div id="content-box2">Player <h3> <h3><: $name2 :></h3></h3>: <span id=cp2>0</span> turns<p>&star;</p>timer: <span id=p1>0</span></div>

<div class="wrapper">
    <div class="items"></div>
</div>
</section>

<script src="js/jquery.3.1.1.min.js"></script>
<script src="js/script.js"></script>

<script>

$(function() {
: $images | mark_raw   

    function shuffle(array) {
        var currentIndex = array.length,
            temporaryValue, randomIndex;

        // While there remain elements to shuffle...
        while (0 !== currentIndex) {

            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }

        return array;
    }

    var arr = img_urls;
    arr = shuffle(arr);
    //console.log(arr);

    for (i = 0; i < img_urls.length; i++) {
        $(".items").append(
            "<div class='container'><div class='front'>" + img_urls[i] + "</div><div class='back'><img class='image' src=' " + img_urls[i] + "'/></div></div>"
        );
    }

    var first;
    var second;

    var total_clicks = 0;
    var count = 0;
    var active = 1;
    var request;
    
    function check_level() {
        if (total_clicks === 8) {

            $(".first-svg").removeClass("level");

        } else if (total_clicks === 16) {

            $(".second-svg").removeClass("level");

        } else if (total_clicks === 24) {
            $(".third-svg").removeClass("level");

        }
    }

    function check_if_game_over() {
    	
    	//alert(img_urls.length);
    	//alert($(".matched").length);
        if ($(".matched").length/2 === img_urls.length) {

			request = $.ajax({
        		url: "/setpush",
        		type: "post",
        		data: "winner="+rem[turn]+"; user=AAA;"
    		});
    				
            setTimeout(function() {
                alert("Game over");
            }, 1200);

            setTimeout(function() {
                location.reload();
            }, 1800);

        }
    }

  var turn=0,rem=[0];rem.push(rem[0]) //rem:remaining time
  
  var pad=function(x){return('0'+x).slice(-2)}
  
  var fmt=function(t){var h=Math.floor(t/3600),m=Math.floor(t/60)%60,s=t%60;return(h?h+':'+pad(m):m)+':'+pad(s)}
  var els=[];for(var i=0;i<2;i++)els.push(document.getElementById('p'+i))
  var upd=function(){
    rem[turn]++;for(var i=0;i<2;i++)els[i].textContent=fmt(rem[i])
    if(rem[turn]<=0){var l=els[turn].classList;l.remove('turn');l.add('loser');clearInterval(iid)}
  }
  var switchTurn=function(){
    if(!iid)return
    els[turn].classList.remove('turn');turn=1-turn
    els[turn].classList.add('turn');rem[turn]+=2 //add 2 seconds per move
  }
  //document.body.onmousedown=function(){switchTurn();return!1}
  //document.body.onkeydown=function(e){if(e.keyCode===32){switchTurn();return!1}}
  els[0].classList.add('turn')
  var iid=setInterval(upd,1000) //interval id
  

    $(".front").click(function(e) {

        count++;
		
        //prevent fast click
        if ($(e.target).data('oneclicked') != 'yes') {
            $(e.target).css("pointer-events", "none")
            setTimeout(function() {
                $(e.target).css("pointer-events", "auto")
            }, 400);
        }

        if (count === 1) {

            $(this, ".front").addClass("showBack-front").addClass("clicked");
            $(this).next('.back').addClass("showBack-back").addClass("clicked");

            first = $(this, ".front").text();

        } else {

            $(this, ".front").addClass("showBack-front").addClass("clicked");;
            $(this).next('.back').addClass("showBack-back").addClass("clicked");;

            second = $(this, ".front").text();
            count = 0;

            $(".front").css("pointer-events", "none");

            setTimeout(function() {

                if (first === second) {
                // matching cards
                	
                	if (total_clicks > 0 ){
                    	total_clicks = total_clicks - 1;
					}
					
                    $('.clicked').addClass('animated tada matched no-pointer-events');

                                    
	                if (active === 1){
     		           //active = 2;
		               $("p:first").html("&bigstar;");
					   $("p:last").html("&star;");
	                	 
	              	}else{           
	              	   //active = 1; 		 
		               $("p:last").html("&bigstar;");
		               $("p:first").html("&star;");
					}
					
					//Check if game over
                    check_if_game_over();

                } else {
    				//Changing active user
					
                    $(".front").removeClass("showBack-front");
                    $(".back").removeClass("showBack-back");

                    $('.clicked').addClass('animated shake');

                    setTimeout(function() {
                        $(".clicked").removeClass("clicked shake");
                    }, 500);
                    
                    
                    total_clicks = $("#cp"+active).text();
                    
                    total_clicks++;
                    
                    
                    if (active === 1){
     		 		   active = 2;
     		 		   switchTurn();
		               $("p:first").html("&star;");
					   $("p:last").html("&starf;");

	                   $("#cp1").text(total_clicks); 
	              	}else{     
	              	   active = 1;
	              	   switchTurn();       		 
		               $("p:last").html("&star;");
		               $("p:first").html("&starf;");

	                   $("#cp2").text(total_clicks); 
					}

                }

                $(".front").css("pointer-events", "auto");

                check_level();

            }, 600);

        }

        return false;
    });


// Limit scope pollution from any deprecated API
(function() {

    var matched, browser;

    // Use of jQuery.browser is frowned upon.
    // More details: http://api.jquery.com/jQuery.browser
    // jQuery.uaMatch maintained for back-compat
    jQuery.uaMatch = function(ua) {
        ua = ua.toLowerCase();

        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];

        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    };

    matched = jQuery.uaMatch(navigator.userAgent);
    browser = {};

    if (matched.browser) {
        browser[matched.browser] = true;
        browser.version = matched.version;
    }

    // Chrome is Webkit, but Webkit is also Safari.
    if (browser.chrome) {
        browser.webkit = true;
    } else if (browser.webkit) {
        browser.safari = true;
    }

    jQuery.browser = browser;

    jQuery.sub = function() {
        function jQuerySub(selector, context) {
            return new jQuerySub.fn.init(selector, context);
        }
        jQuery.extend(true, jQuerySub, this);
        jQuerySub.superclass = this;
        jQuerySub.fn = jQuerySub.prototype = this();
        jQuerySub.fn.constructor = jQuerySub;
        jQuerySub.sub = this.sub;
        jQuerySub.fn.init = function init(selector, context) {
            if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
                context = jQuerySub(context);
            }

            return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
        };
        jQuerySub.fn.init.prototype = jQuerySub.fn;
        var rootjQuerySub = jQuerySub(document);
        return jQuerySub;
    };

})();

});
</script>
: }